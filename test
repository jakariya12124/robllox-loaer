-- Valex-Style Fly with Auto-Reactivate After Death + Futuristic GUI + Speed Slider
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Settings
local flying = false
local speed = 60 -- minimum speed 60
local gravityPull = -8

local bv, bg, humanoid, root

-- Create GUI
local gui = Instance.new("ScreenGui")
gui.Name = "ValexFlyGUI"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = player:WaitForChild("PlayerGui")

-- Main frame (small, futuristic style)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 180, 0, 70)
frame.Position = UDim2.new(0.5, -90, 0.75, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
frame.BackgroundTransparency = 0.1
frame.BorderSizePixel = 0
frame.AnchorPoint = Vector2.new(0.5, 0)
frame.Active = true
frame.Draggable = true
frame.Parent = gui

-- UIStroke for futuristic glow outline
local stroke = Instance.new("UIStroke")
stroke.Thickness = 1.5
stroke.Color = Color3.fromRGB(0, 255, 255)
stroke.Parent = frame

-- Fly toggle button (smaller, clean)
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 80, 0, 35)
button.Position = UDim2.new(0, 10, 0, 10)
button.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
button.BackgroundTransparency = 0.15
button.BorderSizePixel = 0
button.Text = "Fly: OFF"
button.TextColor3 = Color3.fromRGB(230, 230, 230)
button.Font = Enum.Font.GothamBold
button.TextScaled = true
button.AutoButtonColor = true
button.Parent = frame

-- Speed slider container
local speedContainer = Instance.new("Frame")
speedContainer.Size = UDim2.new(0, 80, 0, 25)
speedContainer.Position = UDim2.new(0, 10, 0, 50)
speedContainer.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
speedContainer.BackgroundTransparency = 0.2
speedContainer.BorderSizePixel = 0
speedContainer.Parent = frame

-- Slider background bar
local sliderBg = Instance.new("Frame")
sliderBg.Size = UDim2.new(1, -4, 0, 6)
sliderBg.Position = UDim2.new(0, 2, 0.5, -3)
sliderBg.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
sliderBg.BorderSizePixel = 0
sliderBg.Parent = speedContainer

-- Slider fill bar
local sliderFill = Instance.new("Frame")
sliderFill.Size = UDim2.new((speed - 60) / 140, 0, 1, 0) -- initial fill relative to speed (range 60-200)
sliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
sliderFill.BorderSizePixel = 0
sliderFill.Parent = sliderBg

-- Slider knob
local knob = Instance.new("ImageButton")
knob.Size = UDim2.new(0, 14, 0, 14)
knob.Position = UDim2.new(sliderFill.Size.X.Scale, -7, 0.5, -7)
knob.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
knob.BorderSizePixel = 0
knob.AutoButtonColor = false
knob.Parent = sliderBg
knob.Image = "" -- no image, just color circle
knob.Name = "Knob"

-- Speed label
local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.new(0, 80, 0, 14)
speedLabel.Position = UDim2.new(0, 10, 1, 5)
speedLabel.BackgroundTransparency = 1
speedLabel.TextColor3 = Color3.fromRGB(150, 255, 255)
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextSize = 14
speedLabel.Text = "Speed: " .. speed
speedLabel.Parent = frame

-- Function to update slider UI & speed value
local function updateSlider(x)
	local sliderPos = math.clamp(x - sliderBg.AbsolutePosition.X, 0, sliderBg.AbsoluteSize.X)
	local scale = sliderPos / sliderBg.AbsoluteSize.X
	speed = 60 + math.floor(scale * 140) -- speed from 60 to 200

	-- Update UI elements
	sliderFill.Size = UDim2.new(scale, 0, 1, 0)
	knob.Position = UDim2.new(scale, -7, 0.5, -7)
	speedLabel.Text = "Speed: " .. speed
end

-- Dragging logic
local dragging = false

knob.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
	end
end)

knob.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

RunService.RenderStepped:Connect(function()
	if dragging then
		local mouseLocation = UserInputService:GetMouseLocation()
		updateSlider(mouseLocation.X)
	end
end)

-- Fly start/stop functions
local function startFlying()
	if not root or not humanoid then return end

	if not bv or not bv.Parent then
		bv = Instance.new("BodyVelocity")
		bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
		bv.P = 125000
		bv.Name = "FlyVelocity"
		bv.Velocity = Vector3.zero
		bv.Parent = root
	end

	if not bg or not bg.Parent then
		bg = Instance.new("BodyGyro")
		bg.MaxTorque = Vector3.new(1e9, 1e9, 1e9)
		bg.P = 50000
		bg.CFrame = workspace.CurrentCamera.CFrame
		bg.Name = "FlyGyro"
		bg.Parent = root
	end

	humanoid.PlatformStand = true
end

local function stopFlying()
	if bv then bv:Destroy() end
	if bg then bg:Destroy() end
	bv, bg = nil, nil
	if humanoid then humanoid.PlatformStand = false end
end

-- Button click toggle
button.MouseButton1Click:Connect(function()
	flying = not flying
	button.Text = "Fly: " .. (flying and "ON" or "OFF")

	if flying then
		startFlying()
	else
		stopFlying()
	end
end)

-- Main loop for fly movement
RunService.RenderStepped:Connect(function()
	if flying and humanoid and root and bv and bg then
		local cam = workspace.CurrentCamera
		local move = humanoid.MoveDirection

		-- Set gyro to camera orientation
		bg.CFrame = cam.CFrame

		local velocity = Vector3.zero

		-- Calculate movement relative to camera
		local camLook = cam.CFrame.LookVector
		local camRight = cam.CFrame.RightVector
		local moveDirection = (camLook * move.Z) + (camRight * move.X)

		if moveDirection.Magnitude > 0 then
			velocity = moveDirection.Unit * speed
		else
			-- Slight upward lift to prevent fall when idle
			velocity = Vector3.new(0, 0.1, 0)
		end

		velocity = velocity + Vector3.new(0, gravityPull, 0)
		bv.Velocity = velocity
	end
end)

-- Setup character and fly on respawn if needed
local function setupCharacter(char)
	task.spawn(function()
		humanoid = char:WaitForChild("Humanoid")
		root = char:WaitForChild("HumanoidRootPart")

		task.wait(0.3) -- wait a bit to ensure everything loads
		if flying then
			startFlying()
		end
	end)
end

player.CharacterAdded:Connect(function(char)
	stopFlying()
	setupCharacter(char)
end)

if player.Character then
	setupCharacter(player.Character)
end
